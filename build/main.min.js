(function () {
'use strict';

function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  head.appendChild(style);
  return returnValue;
}

__$styleInject("*{margin:0;padding:0;box-sizing:border-box}body{background:radial-gradient(#6b6b6b,#000);min-height:100vh}#container{position:absolute;width:100vw;height:100vh;top:0;left:0;overflow:hidden}#enter{height:30px;width:120px;font-size:17px;line-height:30px;text-align:center;color:#fff;background-color:#6cf;border-radius:5px;position:absolute;top:10px;left:calc(50% - 100px);cursor:pointer;z-index:2}#enter:hover{background-color:#abf}canvas{position:absolute;top:0;left:0}#vec{z-index:1}", undefined);

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};



function unwrapExports (x) {
	return x && x.__esModule ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classCallCheck = createCommonjsModule(function (module, exports) {
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
});

var _classCallCheck = unwrapExports(classCallCheck);

var _global = createCommonjsModule(function (module) {
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
});

var _core = createCommonjsModule(function (module) {
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
});

var _aFunction = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};

// optional / simple context binding
var aFunction = _aFunction;
var _ctx = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};

var _isObject = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

var isObject = _isObject;
var _anObject = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};

var _fails = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};

// Thank's IE8 for his funny defineProperty
var _descriptors = !_fails(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});

var isObject$1 = _isObject;
var document$1 = _global.document;
var is = isObject$1(document$1) && isObject$1(document$1.createElement);
var _domCreate = function(it){
  return is ? document$1.createElement(it) : {};
};

var _ie8DomDefine = !_descriptors && !_fails(function(){
  return Object.defineProperty(_domCreate('div'), 'a', {get: function(){ return 7; }}).a != 7;
});

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject$2 = _isObject;
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
var _toPrimitive = function(it, S){
  if(!isObject$2(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject$2(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject$2(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject$2(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};

var anObject       = _anObject;
var IE8_DOM_DEFINE = _ie8DomDefine;
var toPrimitive    = _toPrimitive;
var dP$1             = Object.defineProperty;

var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP$1(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};

var _objectDp = {
	f: f
};

var _propertyDesc = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};

var dP         = _objectDp;
var createDesc = _propertyDesc;
var _hide = _descriptors ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};

var global$1    = _global;
var core      = _core;
var ctx       = _ctx;
var hide      = _hide;
var PROTOTYPE = 'prototype';

var $export$1 = function(type, name, source){
  var IS_FORCED = type & $export$1.F
    , IS_GLOBAL = type & $export$1.G
    , IS_STATIC = type & $export$1.S
    , IS_PROTO  = type & $export$1.P
    , IS_BIND   = type & $export$1.B
    , IS_WRAP   = type & $export$1.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global$1 : IS_STATIC ? global$1[name] : (global$1[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global$1)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export$1.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export$1.F = 1;   // forced
$export$1.G = 2;   // global
$export$1.S = 4;   // static
$export$1.P = 8;   // proto
$export$1.B = 16;  // bind
$export$1.W = 32;  // wrap
$export$1.U = 64;  // safe
$export$1.R = 128; // real proto method for `library` 
var _export = $export$1;

var $export = _export;
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !_descriptors, 'Object', {defineProperty: _objectDp.f});

var $Object = _core.Object;
var defineProperty$2 = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};

var defineProperty = createCommonjsModule(function (module) {
module.exports = { "default": defineProperty$2, __esModule: true };
});

var createClass = createCommonjsModule(function (module, exports) {
"use strict";

exports.__esModule = true;

var _defineProperty = defineProperty;

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
});

var _createClass = unwrapExports(createClass);

/*
 * anime.js
 * Copyright (C) 2016 disoul <disoul@DiSouldeMacBook-Pro.local>
 *
 * Distributed under terms of the MIT license.
 */

var AnimationController = function () {
  function AnimationController() {
    _classCallCheck(this, AnimationController);

    this.animations = {};
    this.init();
    console.log('constructor!', this);
  }

  _createClass(AnimationController, [{
    key: 'init',
    value: function init() {
      window.requestAnimationFrame(this.loop.bind(this));
    }
  }, {
    key: 'loop',
    value: function loop() {
      for (var key in this.animations) {
        this.animations[key].draw.bind(this.animations[key].context)();
      }

      window.requestAnimationFrame(this.loop.bind(this));
    }
  }, {
    key: 'append',
    value: function append(anime, key) {
      this.animations[key] = anime;
    }
  }]);

  return AnimationController;
}();

var animation = new AnimationController();

/**
* @Author: disoul
* @Date:   2016-12-22T17:28:38+08:00
* @Last modified by:   disoul
* @Last modified time: 2016-12-25T19:51:14+08:00
*/

/*
 * draw.js
 * Copyright (C) 2016 disoul <disoul@DiSouldeMacBook-Pro.local>
 *
 * Distributed under terms of the MIT license.
 */
var canvas = document.createElement('canvas');
var container = document.getElementById('container');
var button = document.getElementById('enter');
canvas.id = "vec";
canvas.width = container.clientWidth;
canvas.height = container.clientHeight;
var context = canvas.getContext('2d');

var path = [];
var maxPath = 30;

container.appendChild(canvas);

//var vecData = new Int16Array(canvas.width * canvas.height * 3);
var vecData = [];
for (var i = 0; i < canvas.width; i++) {
  for (var j = 0; j < canvas.height; j++) {
    vecData[(i + j * canvas.width) * 3] = 0;
    vecData[(i + j * canvas.width) * 3 + 1] = 0;
    vecData[(i + j * canvas.width) * 3 + 2] = false;
  }
}

canvas.mouseState = 'up';
canvas.last = null;

document.addEventListener('mouseup', function () {
  canvas.mouseState = 'up';
  canvas.last = null;
  var start = Date.now();
  console.log(button);
  if (path.length - 1 > maxPath) {
    var newPath = [];
    var ratio = path.length / maxPath;

    for (var _i = 0; _i < maxPath; _i++) {
      newPath.push(path[Math.floor(_i * ratio)]);
    }
    path = newPath;
  }

  // remove last path element
  // can not get vector from last path
  path.pop();

  path.forEach(function (p, i) {
    console.log(p, i);
    updateField(p[0], p[1], 60);
  });

  console.log('done!', Date.now() - start);
  path = [];
  context.clearRect(0, 0, canvas.width, canvas.height);
});
document.addEventListener('mousedown', function () {
  canvas.mouseState = 'down';
});
canvas.addEventListener('mousemove', function (e) {
  if (canvas.mouseState == 'down') {
    console.log(e.clientX, e.clientY, canvas.last);
    draw(e.clientX, e.clientY, canvas.last);
  }
});

function draw(x, y, last) {
  if (!last) {
    context.fillRect(x, y, 1, 1);
  } else {
    context.beginPath();
    context.moveTo(last[0], last[1]);
    context.lineTo(x, y);
    context.closePath();
    context.stroke();
    vecData[(last[0] + last[1] * canvas.width) * 3] = x - last[0];
    vecData[(last[0] + last[1] * canvas.width) * 3 + 1] = y - last[1];
    vecData[(last[0] + last[1] * canvas.width) * 3 + 2] = true;
  }
  canvas.last = [x, y];
  path.push([x, y]);
  console.log('push');
}

function updateField(x, y, range) {
  var base = (x + y * canvas.width) * 3;
  var origin = [vecData[base], vecData[base + 1], vecData[base + 2]];
  console.log(base, origin);
  for (var d = 1; d < range; d++) {
    var vec = [origin[0] * (range - d) / range, origin[1] * (range - d) / range];
    for (var _i2 = -1 * d; _i2 <= d; _i2++) {
      for (var _j = -1 * d; _j <= d; _j++) {
        var _base = (x + _i2 + (y + _j) * canvas.width) * 3;
        var data = [vecData[_base], vecData[_base + 1], vecData[_base + 2]];
        if (data[0] == undefined || data[2]) continue;
        vecData[_base] = data[0] + vec[0];
        vecData[_base + 1] = data[1] + vec[1];
        vecData[_base + 2] = 0;
      }
    }
  }
}

/**
 * 公共方法
 */

/**
 * traver 深度优先遍历
 * @param {Object} parent 需要遍历的数据
 * @param {Function} cb callback函数
 */
function traver(parent, cb) { //深度优先遍历
  var child;
  for (var key in parent) { //初步循环
    child = parent[key];
    if (child && typeof(child) === 'object') {
        cb(key, child, parent);
        traver(child, cb);
    }
  }
}


/**
 * isNone 判断是否存在
 * @param {String/Function} d
 * @return {Boolean}
 */
function isNone(d) {
  return (d === null || d === undefined || isNaN(d));
}
var root = commonjsGlobal;
/**
 * extend  合并方法
 * @param  {Objects}  需要扩展的对象
 * @return {Objects}  扩展完成的对象
 *
 * @example
 *   merge(dest, source0, [...]);
 */
function merge$1(dest) {
  var sources = Array.prototype.slice.call(arguments, 1),
    i, j, len, src;

  for (j = 0, len = sources.length; j < len; j++) {
    src = sources[j] || {};
    for (i in src) {
      if (src.hasOwnProperty(i)) {
        dest[i] = src[i];
      }
    }
  }
  return dest;
}

/**
 * clone 浅复制
 * @param  {Object} obj 被复制的对象
 * @return {Object}     复制后的对象
 */
function clone(obj){
  var result = Array.isArray(obj)?[]:{};
    //clone
    for(var k in obj){
      if (obj.hasOwnProperty(k)) {
        result[k] = obj[k];
      }
    }
  return result;
}

function deepClone(src) {
  var input = Array.isArray(src)?[]:{};
  return deepMerge(input, src);
}

function isNeedClone(d) {
  if(!d) return false;
  if(root.HTMLElement && d instanceof root.HTMLElement) return false;
  if(root.HTMLElement && d[0] && d[0] instanceof HTMLElement) return false;
  if(d.globalCompositeOperation) return false;//ctx的情况
  
  //还需判断div 等节点
  return true;
}

var maxDepth = 8;
function deepMerge(dest, src, directs, depth) {
  var i, j, len, src, depth = depth || 0;
  var result = clone(dest);
  // var result = isDirect ? dest : clone(dest);
  if (depth >= maxDepth) {
    console.log('层数过深, 全部继承');
    return src;
  }
  depth++;
    //
    for (i in src) {
      if (src.hasOwnProperty(i)) {
        var value = src[i];
        var destValue = dest[i];
        if(value === destValue) continue;
        if(value === undefined) continue;
        if (destValue && typeof (destValue) === 'object' && typeof (value) === 'object') {
          if (!isNeedClone(value) || (directs && i in directs)) {
            result[i] = value;
            continue;
          }
          if (Array.isArray(destValue) !== Array.isArray(value)) { // 继承和被继承的 一个是数组 一个是对象
            value = deepClone(value);
            result[i] = value;
            continue;
          }

          result[i] = deepMerge(destValue, value, directs, depth);
          continue;
        }
        if (typeof (value) === 'object' && isNeedClone(value)) value = deepClone(value);
        result[i] = value;
      }
    }
  return result;
}


/**
 * switchValue 如果是非函数 返回本身 如果是函数 执行之，常用于options内部的判断
 * @param  {Any} f 函数或数值
 * @param  {Any} a 参数1
 * @param  {Any} b 参数2
 * @param  {Any} c 参数3
 * @param  {Any} d 参数4
 * @return {Any}   返回值
 */
function switchValue(f, a, b, c, d) {
  if(typeof (f) === 'function') return f(a, b, c, d);
  return f;
}

var root;
if (typeof window === 'object') {
  root = window;
} else {
  root = {};
}

function getContainer(container) {
  if (root.HTMLElement && container instanceof root.HTMLElement) return container;
  if (root.HTMLElement && container[0] && container[0] instanceof root.HTMLElement) return container[0];
  if (typeof container === 'string') {
    if (container.charAt(0) === '.') {
      var className = container.slice(1);
      return container = document.getElementsByClassName(className)[0];
    } else {
      var id;
      if (container.charAt(0) !== '#') {
        id = container;
      } else {
        id = container.slice(1);
      }
      return container = document.getElementById(id);
    }
    if (!container) {
      throw '没有container ';
    }
  }
  return container;
}

var utils$1 = {
  'getContainer': getContainer,
  'merge': merge$1,
  'extend': merge$1,
  'isNone': isNone,
  'traver': traver,
  'deepMerge': deepMerge,
  'clone': clone,
  'deepClone': deepClone,
  'switchValue': switchValue
};

/**
 * parse 将颜色解析为统一格式 支持 rgb(255,255,255) rgba(255,255,255,1), hsl(0,100%,100%) hsla(0,100%,100%,1) #fff #ffffff
 * @param  {String} str 传入的色彩参数
 * @return {Object}     自定义的色彩中间量
 */
function parse$1(str) {
  if (str === '' || str === undefined || str === null) return console.log('木有颜色参数');
  if(typeof(str) === 'object' && str.type) return str; 
  var l, ll, lll, llll;
  if (str.indexOf('#') !== -1) { // #fff / #ffffff 型色彩
    var hexes = str.split('#')[1],
      hexN = hexes.length;
    if (hexN === 3) {
      l = parseInt(hexes[0], 16);
      l = l * 16 + l;
      ll = parseInt(hexes[1], 16);
      ll = ll * 16 + ll;
      lll = parseInt(hexes[2], 16);
      lll = lll * 16 + lll;
    } else if (hexN === 6) {
      l = parseInt(hexes[0], 16) * 16 + parseInt(hexes[1], 16);
      ll = parseInt(hexes[2], 16) * 16 + parseInt(hexes[3], 16);
      lll = parseInt(hexes[4], 16) * 16 + parseInt(hexes[5], 16);
    } else {
      return console.log('#标记色彩 格式错误');
    }
    return {
      type: 'rgba',
      arr: [l, ll, lll, 1]
    };
  } else { //rgba() / rgb()/ hsl() hsla() 型色彩
    var strs = str.split(','),
      type, strsN = strs.length;
    l = parseInt(strs[0].split('(')[1], 10);
    ll = parseInt(strs[1].split('%')[0], 10);
    lll = parseInt(strs[2].split('%')[0], 10);
    llll = (strsN === 4) ? parseFloat(strs[3], 10) : 1;
    return {
      type: (str.indexOf('hsl') !== -1) ? 'hsla' : 'rgba',
      arr: [l, ll, lll, llll]
    };
  }
}

function setOpacity(c, opacity) {
  c = parse$1(c);
  c.arr[3] = opacity;
  return toString$1(c);
}

function rgb2hsl$1(r, g, b, a) {
  if(typeof(r) === 'object') {
    if(r.type.indexOf('hsl') !== -1) return r;
    var arr = r.arr;
    return rgb2hsl$1(arr[0], arr[1], arr[2], arr[3]);
  } 
  r = r / 255;
  g = g / 255;
  b = b / 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2, d = max - min;

    if (max === min) {
        h = s = 0;
    } else {
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

        switch (max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2;               break;
            case b: h = (r - g) / d + 4;               break;
        }
        h /= 6;
    }
    return {
      type: 'hsla',
      arr: [Math.floor(h * 360), Math.floor(s * 100), Math.floor(l * 100), a || 0]
    };
}


// function rgb2hsv (rgb){
//   if(typeof(rgb) === 'object'){

//   } else if(typeof(rgb) === 'string'){

//   }
// }

// function rgb2hsv (r, g, b, o) {
//   var h = 

// }

// console.log(parseColor('#0ff'),parseColor('#00ffff'),parseColor('rgb(0,255,255)'),parseColor('rgba(0,255,255,1)'),parseColor('hsl(180,100%,50%)'),parseColor('hsla(180,100%, 50%, 0.5)'));
/**
 * toString 把标准色彩格式转化为 string
 * @param  {Object} obj 标准格式
 * @return {String}     标准web色
 */
var floor = Math.floor;
function toString$1(obj) {
  if (!obj || !obj.type || !obj.arr) return console.log('颜色格式不对');
  var arr = obj.arr, type = obj.type;
  if(type === 'rgba'){
    if (arr[3] != 1) return type + '(' + floor(arr[0]) + ',' + floor(arr[1]) +  ',' + floor(arr[2]) +  ',' + arr[3] + ')';
    return 'rgb(' + floor(arr[0]) + ',' + floor(arr[1]) +  ',' + floor(arr[2]) +  ')';
  } 
  if(type === 'hsla') return type + '(' + floor(arr[0]) + ',' + floor(arr[1]) +  '%,' + floor(arr[2]) +  '%,' + arr[3] + ')';
  return console.log('颜色格式不对');
}

var format$2 = {'parse': parse$1, 'toString': toString$1, 'setOpacity': setOpacity, rgb2hsl: rgb2hsl$1};

var easing = {
    Linear: {
      None: function(k) {
        return k;
      }
    },

    Quadratic: {
      In: function(k) {
        return k * k;
      },

      Out: function(k) {
        return k * (2 - k);
      },

      InOut: function(k) {
        if ((k *= 2) < 1) return 0.5 * k * k;
        return -0.5 * (--k * (k - 2) - 1);
      }
    },

    Cubic: {
      In: function(k) {
        return k * k * k;
      },
      Out: function(k) {
        return --k * k * k + 1;
      },

      InOut: function(k) {
        if ((k *= 2) < 1) return 0.5 * k * k * k;
        return 0.5 * ((k -= 2) * k * k + 2);
      }
    },

    Quartic: {
      In: function(k) {
        return k * k * k * k;
      },
      Out: function(k) {
        return 1 - (--k * k * k * k);
      },
      InOut: function(k) {
        if ((k *= 2) < 1) return 0.5 * k * k * k * k;
        return -0.5 * ((k -= 2) * k * k * k - 2);
      }
    },

    Quintic: {
      In: function(k) {
        return k * k * k * k * k;
      },

      Out: function(k) {
        return --k * k * k * k * k + 1;
      },

      InOut: function(k) {
        if ((k *= 2) < 1) return 0.5 * k * k * k * k * k;
        return 0.5 * ((k -= 2) * k * k * k * k + 2);
      }
    },

    Sinusoidal: {
      In: function(k) {
        return 1 - Math.cos(k * Math.PI / 2);
      },

      Out: function(k) {
        return Math.sin(k * Math.PI / 2);
      },

      InOut: function(k) {
        return 0.5 * (1 - Math.cos(Math.PI * k));
      }
    },

    Exponential: {
      In: function(k) {
        return k === 0 ? 0 : Math.pow(1024, k - 1);
      },

      Out: function(k) {
        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
      },

      InOut: function(k) {
        if (k === 0) return 0;
        if (k === 1) return 1;
        if ((k *= 2) < 1) return 0.5 * Math.pow(1024, k - 1);
        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
      }
    },

    Circular: {

      In: function(k) {
        return 1 - Math.sqrt(1 - k * k);
      },

      Out: function(k) {
        return Math.sqrt(1 - (--k * k));
      },

      InOut: function(k) {
        if ((k *= 2) < 1) return -0.5 * (Math.sqrt(1 - k * k) - 1);
        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
      }
    },

    Elastic: {
      In: function(k) {
        var s, a = 0.1,
          p = 0.4;
        if (k === 0) return 0;
        if (k === 1) return 1;
        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else s = p * Math.asin(1 / a) / (2 * Math.PI);
        return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
      },

      Out: function(k) {
        var s, a = 0.1,
          p = 0.4;
        if (k === 0) return 0;
        if (k === 1) return 1;
        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else s = p * Math.asin(1 / a) / (2 * Math.PI);
        return (a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1);
      },

      InOut: function(k) {
        var s, a = 0.1,
          p = 0.4;
        if (k === 0) return 0;
        if (k === 1) return 1;
        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else s = p * Math.asin(1 / a) / (2 * Math.PI);
        if ((k *= 2) < 1) return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
        return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
      }
    },

    Back: {
      In: function(k) {
        var s = 1.70158;
        return k * k * ((s + 1) * k - s);
      },

      Out: function(k) {
        var s = 1.70158;
        return --k * k * ((s + 1) * k + s) + 1;
      },

      InOut: function(k) {
        var s = 1.70158 * 1.525;
        if ((k *= 2) < 1) return 0.5 * (k * k * ((s + 1) * k - s));
        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
      }
    },

    Bounce: {
      In: function(k) {
        return 1 - Easing.Bounce.Out(1 - k);
      },

      Out: function(k) {
        if (k < (1 / 2.75)) {
          return 7.5625 * k * k;
        } else if (k < (2 / 2.75)) {
          return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
        } else if (k < (2.5 / 2.75)) {
          return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
        } else {
          return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
        }
      },

      InOut: function(k) {

        if (k < 0.5) return Easing.Bounce.In(k * 2) * 0.5;
        return Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;

      }

    }
  };

var Easing$2 = easing;
var pow$1 = Math.pow;


function Transition(easing$$1) {
}

/**
 * easing 根据easing缩写字符(easing函数返回本身) 返回easing函数
 * @param  {String} easing easing字符/函数
 * @return {Function}        easing函数
 */
Transition.prototype.easing = function (easing$$1) {
  var func;
  if (typeof (easing$$1) === 'string') {
    easing$$1 = easing$$1[0].toUpperCase() + easing$$1.substring(1); //首字母大写
    var strs = easing$$1.split('.');
    if (easing$$1.indexOf('Linear') !== -1) {
      easing$$1 = Easing$2.Linear.None;
    } else {
      if (strs.length < 2) return console.log('easing不存在');
      if (Easing$2[strs[0]]) {
        easing$$1 = Easing$2[strs[0]][strs[1]];
      } else {
        return console.log('easing不存在');
      }
    }
    if (strs[2]) {
      var n = parseFloat(strs[2], 10);
      func = function (k) {
        return pow$1(easing$$1(k), n);
      };
    }
  }
  this.func = func || easing$$1;
  return this;
};

Transition.prototype.toFunc = function () {
  return this.func;
};

function transition$1(){
  return new Transition();
}

// console.log(parseColor('#0ff'),parseColor('#00ffff'),parseColor('rgb(0,255,255)'),parseColor('rgba(0,255,255,1)'),parseColor('hsl(180,100%,50%)'),parseColor('hsla(180,100%, 50%, 0.5)'));
var index$6 = transition$1;

var format$1 = format$2;
var transition = index$6;
var parse = format$1.parse;
var toString = format$1.toString;
var rgb2hsl = format$1.rgb2hsl;
var max = Math.max;
var min = Math.min;

function lerp(colorFrom, colorTo, k) {
  var from = parse(colorFrom),
    to = parse(colorTo);

  k = min(k, 1);
  k = max(k, 0);

  var type = from.type;
  var arrF = from.arr,
    arrT = to.arr;
  var l = arrF[0],
    dl = arrT[0] - l;
  var ll = arrF[1],
    dll = arrT[1] - ll;
  var lll = arrF[2],
    dlll = arrT[2] - lll;
  var llll = arrF[3],
    dllll = arrT[3] - llll;

  return toString({
    type: type,
    arr: [
      l + dl * k,
      ll + dll * k,
      lll + dlll * k,
      llll + dllll * k,
    ]
  });
}

function Blending (colorFrom, colorTo, blendingType, easing$$1, colorDefault){
  if(typeof(blendingType) === 'number') return lerp(colorFrom, colorTo, blendingType);
  var blendingType = blendingType || 'hsl';
  var from = parse(colorFrom),
    to = parse(colorTo);
  if (blendingType.indexOf('hsl') !== -1) {
    if (from.type.indexOf('hsl') === -1) from = rgb2hsl(from);
    if (to.type.indexOf('hsl') === -1) to = rgb2hsl(to);
  }
  if (!from || !to) return;
  var type = from.type;

  var arrF = from.arr,
    arrT = to.arr;
  var l = arrF[0],
    dl = arrT[0] - l;
  var ll = arrF[1],
    dll = arrT[1] - ll;
  var lll = arrF[2],
    dlll = arrT[2] - lll;
  var llll = arrF[3],
    dllll = arrT[3] - llll;

  if (from.type !== to.type) return console.log('colorFrom和colorTo的类型应该一致');
  var easing$$1 = transition().easing(easing$$1 || 'linear').toFunc();


  this.func = function (k) {
    if (k=== null || k ===undefined) return colorDefault;
    k = easing$$1(k); 
    return toString({
      type: type,
      arr: [
        l + dl * k,
        ll + dll * k,
        lll + dlll * k,
        llll + dllll * k
      ]
    });
  };

  return this;
} 

Blending.prototype.toFunc = function() {
  return this.func;
};

Blending.prototype.toArray = function(N) {
  var func = this.func, arr = [];
  for(var k = 1; k>=0; k-= 1/N){
    arr.push(func(k));
  }
  return arr;
};

/**
 * toCss 生成渐变的css
 * @param  {Number} N   细分的段数
 * @param  {Object} opt 参数对象
 * @return {Object}     返回css对象{background:xxxx}
 */
Blending.prototype.toCss = function(N, opt) {//radial
  var N = N || 5;
  var opt = opt || {};
  var type = opt.type || 'linear';
  var func = this.func, arr = [];
  var arr = [], arr1 = [];
  for(var k = 0; k<=1; k+= 1/N){
    arr.push('color-stop(' + k.toFixed(2) + ',' + func(k) + ') ');
    arr1.push(func(k));
  }
  var str = arr.join(','), str1 = arr1.join(',');
  //
  var gradient, webkitGradient;
  if(type === 'linear'){
    var direction = opt.direction || 'left top, left bottom,';
    gradient = 'gradient(linear,' + direction + str + ')';
    webkitGradient = '-webkit-gradient(linear,' + str + ')';
  } else {
    var center = opt.center || 'center';
    gradient = 'radial-gradient(' + center + ', ellipse,' + str1 + ')';
    webkitGradient = '-webkit-radial-gradient(' + center + ', ellipse,' + str1 + ')';
  }
  return {
    'background': gradient,
    'backgroundImage': webkitGradient
  };
};

function blending$1(colorFrom, colorTo, blendingType, easing$$1, colorDefault) {
  return new Blending(colorFrom, colorTo, blendingType, easing$$1, colorDefault);
}

// console.log(parseColor('#0ff'),parseColor('#00ffff'),parseColor('rgb(0,255,255)'),parseColor('rgba(0,255,255,1)'),parseColor('hsl(180,100%,50%)'),parseColor('hsla(180,100%, 50%, 0.5)'));
var blending_1 = blending$1;

/**
 */
var merge = utils$1.merge;
var blending = blending_1;
var format = format$2;

/**
 * updateColorFunc 解析色彩
 * @param  {[type]} a 可以为对象 或colorFrom
 * @param  {[type]} b colorTo
 * @param  {String} c blendingType rgb或hsl 在哪个空间下插值
 * @param  {[type]} d easing函数或关键字符
 */

function getColorFunc(colorFrom, colorTo, blendingType, easing, defaults) {
  if (typeof(colorFrom) === 'function') {
    return colorFrom;
  } else if (typeof(colorFrom) === 'object' && !arguments[1]) {
    return blending(colorFrom.from, colorFrom.to, colorFrom.space, colorFrom.easing, colorFrom.default || colorFrom.none).toFunc();
  } else if (typeof(colorFrom === 'number')) {
    return function() {
      return colorFrom;
    };
  } else {
    return blending(colorFrom || '#0ff', colorTo || '#000', blendingType, easing, defaults).toFunc();
  }
}

var index$4 = merge(format, {
  blending: blending,
  getColorFunc: getColorFunc
});

function Class$1() {}
/**
 * Create a new Class that inherits from this class
 * @param  {Function} fn    [description]
 * @param  {[type]}   proto [description]
 * @return {[type]}         [description]
 */
Class$1.extend = function (newClass, proto) {
  if (typeof newClass !== 'function' && !proto) {
    proto = newClass;
    newClass = function () {};
  } else if (!newClass) {
    newClass = function () {};
  }

  /*
  var className = newClass.name;
  var code = 'function ' + className + '() {';
  code += 'var args = Array.prototype.slice.apply(arguments);';
  code += 'sfn.apply(this, args);';
  code += 'fn.apply(this, args);';
  // code += 'fn.prototype.__constructor && fn.__constructor.apply(this, arguments);';
  code += '}; return ' + className + ';';
  console.log(code);
  newClass = new Function('fn', 'sfn', code)(newClass, this);
  */

  // Instantiate a base class (but only create the instance,
  // don't run the init constructor)
  var superClass = this;
  var prototype;
  var i;

  if (Object.create) {
    prototype = Object.create(superClass.prototype, {
      constructor: {
        value: newClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  } else {
    prototype = new superClass;
    prototype.constructor = newClass;
  }
  // Populate our constructed prototype object
  if (proto) {
    for(i in proto) {
      if (proto.hasOwnProperty(i)) {
        prototype[i] = proto[i];
      }
    }
  }
  // setup super functions
  prototype._super = superClass;
  newClass.prototype = prototype;
  // And make this class extendable
  newClass.extend = Class$1.extend;
  /*
  newClass.create = function () {
    var len = arguments.length;
    var args = ['cls', 'a'];
    var params = [];
    for (var i = 0; i < len; i++) {
      params.push('a[' + i + ']');
    }
    args.push('return new cls(' + params.join(',') + ');');
    var fn = Function.apply(this, args)(this, arguments);
    // 父级构造
    // superClass.apply(fn,arguments);
    // 当前构造
    fn.__constructor && fn.__constructor.apply(fn, arguments);
    return fn;
  };
  */

  return newClass;
};

var _class = Class$1;

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Class = _class;
//@body
/**
  迁移至浏览器端使用
  **/
//var isArray = Array.isArray;
var isArray = Array.isArray || function(obj){
	return Object.prototype.toString.call(obj) === '[object Array]' ? true : false;
};

function EventEmitter$1(){}
EventEmitter$1 = Class.extend(EventEmitter$1);

var event = EventEmitter$1;
var EventEmitter_1 = EventEmitter$1;

// By default EventEmitters will print a warning if more than
// 10 listeners are added to it. This is a useful default which
// helps finding memory leaks.
//
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
var defaultMaxListeners = 20;
EventEmitter$1.prototype.setMaxListeners = function(n) {
  if (!this._events) this._events = {};
  this._maxListeners = n;
};


EventEmitter$1.prototype.emit = function() {
  var type = arguments[0];
  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events || !this._events.error ||
        (isArray(this._events.error) && !this._events.error.length))
    {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
      return false;
    }
  }

  if (!this._events) return false;
  var handler = this._events[type];
  if (!handler) return false;

  if (typeof handler == 'function') {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        var l = arguments.length;
        var args = new Array(l - 1);
        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
    return true;

  } else if (isArray(handler)) {
    var l = arguments.length;
    var args = new Array(l - 1);
    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];

    var listeners = handler.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].apply(this, args);
    }
    return true;

  } else {
    return false;
  }
};

// EventEmitter is defined in src/node_events.cc
// EventEmitter.prototype.emit() is also defined there.
EventEmitter$1.prototype.addListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('addListener only takes instances of Function');
  }

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type == "newListeners"! Before
  // adding it to the listeners, first emit "newListeners".
  this.emit('newListener', type, listener);

  if (!this._events[type]) {
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  } else if (isArray(this._events[type])) {

    // If we've already got an array, just append.
    this._events[type].push(listener);

  } else {
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  }

  // Check for listener leak
  if (isArray(this._events[type]) && !this._events[type].warned) {
    var m;
    if (this._maxListeners !== undefined) {
      m = this._maxListeners;
    } else {
      m = defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('Possible mem-leak detected. event[' + type +'] %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      console.trace();
    }
  }

  return this;
};

EventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;

EventEmitter$1.prototype.once = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('.once only takes instances of Function');
  }

  var self = this;
  function g() {
    self.removeListener(type, g);
    listener.apply(this, arguments);
  }

  g.listener = listener;
  self.on(type, g);

  return this;
};

EventEmitter$1.prototype.removeListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('removeListener only takes instances of Function');
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (!this._events || !this._events[type]) return this;

  var list = this._events[type];

  if (isArray(list)) {
    var position = -1;
    for (var i = 0, length = list.length; i < length; i++) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener))
      {
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    list.splice(position, 1);
    if (list.length == 0)
      delete this._events[type];
  } else if (list === listener ||
             (list.listener && list.listener === listener))
  {
    delete this._events[type];
  }

  return this;
};

EventEmitter$1.prototype.removeAllListeners = function(type) {
  if (arguments.length === 0) {
    this._events = {};
    return this;
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (type && this._events && this._events[type]) this._events[type] = null;
  return this;
};

EventEmitter$1.prototype.listeners = function(type) {
  if (!this._events) this._events = {};
  if (!this._events[type]) this._events[type] = [];
  if (!isArray(this._events[type])) {
    this._events[type] = [this._events[type]];
  }
  return this._events[type];
};

EventEmitter$1.prototype.off = EventEmitter$1.prototype.removeAllListeners;
EventEmitter$1.prototype.on = EventEmitter$1.prototype.addListener;
EventEmitter$1.prototype.fire = EventEmitter$1.prototype.fireEvent = EventEmitter$1.prototype.emit;
EventEmitter$1.prototype.clearAllEventListeners = EventEmitter$1.prototype.removeAllListeners;

event.EventEmitter = EventEmitter_1;

var Color$1 = index$4;
var EventEmitter = event;
var Utils$2 = utils$1;
var getColorFunc$1 = Color$1.getColorFunc;

function upper(str) {
  return str[0].toUpperCase() + str.slice(1);
}

function clean(ctx) {
  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
}

function Gradient(ctx, options) {
  this.ctx = ctx;
  this.initialize(ctx, options);
}

Gradient = EventEmitter.extend(Gradient, {
  options:{
    type: 'radian',
    drawN: 6,
    isContinue: false
  },
  initialize: function (ctx, options) {
    this.options = Utils$2.deepMerge(this.options, options);
    this.updateColor(options.color);
    this.updateSprite();
  },
  update: function (ds) {
    var bol = false;
    for(var key in ds){
      if(ds[key] === undefined || ds[key] === null) continue;
      if(this.options[key] !== ds[key]){
        bol = true;
        if(this['update' + upper(key)]){
          this['update' + upper(key)](ds[key]);
        }else{
          this.options[key] = ds[key];
        }
      }
    }
    if(bol) return this.updateSprite();
  },
  updateType: function (type) {
    this.options.type = type;
  },
  updateColor: function (a, b, c) {
    this.colorFunc = getColorFunc$1(a, b, c);
  },
  updateDrawN: function (drawN){
    this.options.drawN = drawN;
  },
  updateSprite: function() {
    clean(this.ctx);
    var type = this.options.type;
    var isContinue = this.options.isContinue;
    if (type === 'linear' && !isContinue) return this.updateSpriteLinear();
    if (type === 'linear' && isContinue) return this.updateSpriteLinearContinue();
    if (type === 'radian' && !isContinue) return this.updateSpriteRadian();
    if (type === 'radian' && isContinue) return this.updateSpriteRadianContinue();
    this.emit('update');
  },

  updateSpriteLinear: function() {
    var colorFunc = this.colorFunc;
    var ctx = this.ctx,
      w = ctx.canvas.width,
      h;
    ctx.globalCompositeOperation = 'source-over';
    var d = 1 / this.options.drawN;
    for (var k = 0; k < 1; k += d) {
      ctx.fillStyle = colorFunc(k);
      h = w * k;
      ctx.fillRect(h, 0, d * w, w);
      ctx.fill();
    }
  },

  updateSpriteRadian: function() {
    var colorFunc = this.colorFunc;
    var ctx = this.ctx;
    var w = ctx.canvas.width,
      h;
    var d = 1 / this.options.drawN;
    var r = w/2;
    for (var k = 1; k > 0; k -= d) {
      ctx.beginPath();
      ctx.globalCompositeOperation = 'source-over';
      ctx.fillStyle = colorFunc(k);
      ctx.arc(r, r, r * k, 0, Math.PI*2);
      ctx.fill();
      ctx.closePath();
      ctx.beginPath();
      ctx.globalCompositeOperation = 'destination-out';
      ctx.fillStyle = '#000';
      ctx.arc(r, r, r * Math.max((k - d), 0), 0, Math.PI*2);
      ctx.fill();
      ctx.closePath();
    }
  },

  updateSpriteLinearContinue: function(){
    var colorFunc = this.colorFunc;
    var ctx = this.ctx;
    ctx.globalCompositeOperation = 'source-over';
    var w = ctx.canvas.width;
    var gradient = ctx.createLinearGradient(0,0,w,0);
    for(var k = 0; k <= 1; k+= 1/ this.options.drawN){
      k = Math.round(k * 100) / 100;
      gradient.addColorStop(k, colorFunc(k));
    }
    ctx.fillStyle = gradient;
    ctx.fillRect(0,0,w,w);
  },

  updateSpriteRadianContinue: function(){
    var colorFunc = this.colorFunc;
    var ctx = this.ctx;
    ctx.globalCompositeOperation = 'source-over';
    var w = ctx.canvas.width;
    var r = w / 2;
    var gradient = ctx.createRadialGradient(r,r,0,r,r,r);
    for(var k = 0; k <= 1; k+= 1 / this.options.drawN){
      gradient.addColorStop(k, colorFunc(k));
    }
    gradient.addColorStop(1, 'rgba(0,0,0,0)');
    ctx.fillStyle = gradient;
    ctx.fillRect(0,0,w,w);
  },
  
  getBase64: function() {
    return this.ctx.canvas.toDataURL();
  },
  getCanvas: function() {
    return this.ctx.canvas;
  }
});

function gradient$1(ctx, options) {
  return new Gradient(ctx, options);
}

var gradient_1 = gradient$1;

var gradient = gradient_1;
var Utils$1 = utils$1;

var spriteDefaultOptions = {
  'isContinue': false,
  'type': 'radian',
  'drawN': 20,
  //
  'width': 100,
  'height': 100,
  //
  'color': {
    'from': 'rgba(0,150,150,0)',
    'to': 'rgba(250,250,250,1)',
    'space': 'rgb',
    'easing': 'linear.None.2'
  }
};

function sprite(options) {
  var canvas = document.createElement('canvas');
  canvas.width = options.width || options.w || options.size || options.radius * 2 || 80;
  canvas.height = options.height || options.h || options.size || options.radius * 2 || 80;
  var ctx = canvas.getContext('2d');
  return gradient(ctx, options).getCanvas();
  // if (typeof(type) === 'string') {
  //   switch (type) {
  //     case 'gradient':
  //       options = Utils.deepMerge(spriteDefaultOptions, options);
  //       break;
  //   }
  // }
}

var spriteCacheObejct = {};

function getSpriteKey(object) {
  var key = '';
  for (var k in object) {
    key += object[k];
  }
  var color = object.color;
  for(var i in color){
    key += color[i];
  }
  return key;
}

function getSprite(options, d) {
  if(typeof (options) === 'function') return options(d);
  if (options instanceof HTMLElement) return options; //入参本身是sprite
  options = Utils$1.deepMerge(spriteDefaultOptions, options);
  var key = getSpriteKey(options);
  if (spriteCacheObejct[key]) return spriteCacheObejct[key];
  return spriteCacheObejct[key] = sprite(options);
}


var index$8 = {
  'gradient': gradient,
  'sprite': sprite,
  'getSprite': getSprite
};

/**
 * Copyright (c) 2011, Sun Ning.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

function Grid$2() {
}

Grid$2.prototype = {
  shapeType: 'hex',
  _r: 10,
  _rx: null,
  _ry: null,
  _precision: 5, //经纬度的精度 一般5位已经很精确了
  transform: function (transform) {
    if(!transform) return;
    this._transform = transform;
    this.update();
    return this;
  },

  r: function (r) {
    if (this._r === r) return;
    this._r = this._rx = this._ry = r;
    return this;
  },
  rx: function (rx) {
    if (this._rx === rx) return;
    this._rx = rx;
    return this;
  },
  ry: function (ry) {
    if (this._ry === ry) return;
    this._ry = ry;
    return this;
  },

  /**
   * shape 规定grid的类型
   * @param  {String | } type [description]
   * @return {[type]}      [description]
   */
  shape: function (type) {
    if (!type) return;
    if (typeof (type) === 'number') {
      if (type === 4) {
        type = 'rect';
      } else if (type === 6) {
        type = 'hex';
      } else {
        return console.log('目前只支持六边形和方形 数字只能为4和6');
      }
    }
    if (type !== 'rect' && type !== 'hex') {
      return console.log('目前只支持六边形和方形 数字只能为4和6');
    }
    this.shapeType = type;
    return this;
  },

  update: function () {
    if (!this._transform) return console.log('必须设定屏幕距离与经纬度的转换 transform');
    var d = this._transform(this._rx || this._r, this._ry || this._r);
    var precision = this._precision;
    this.dlat = (d.dlat).toPrecision(precision);
    this.dlng = (d.dlng).toPrecision(precision);
    return this;
  },

  // 将grid-hash编码
  encode: function (lat, lng) {
    var dlat = this.dlat, dlng = this.dlng;
    var shapeType = this.shapeType;
    if (shapeType === 'rect') return this.encodeRect(lat, lng, dlat, dlng);
    if (shapeType === 'hex') return this.encodeHex(lat, lng, dlat, dlng);
  },


  //将grid-hash解码
  decode: function (key) {
    var ks = key.split('_');
    var shapeType = ks[0];
    var latkey = parseInt(ks[1], 10), lngkey = parseInt(ks[2], 10), dlat = parseFloat(ks[3]), dlng = parseFloat(ks[4]);
    var latMin = (latkey - 0.5) * dlat,
        lngMin = (lngkey - 0.5) * dlng,
        latMax = (latkey + 0.5) * dlat,
        lngMax = (lngkey + 0.5) * dlng;
    if (shapeType === 'rect') return this.toPtsRect(latMin, lngMin, latMax, lngMax);
    if (shapeType === 'hex'){
      var isOdd = latkey % 2;
      return this.toPtsHex(latMin, lngMin, latMax, lngMax, isOdd);
    } 
  },

  encodeRect: function (lat, lng, dlat, dlng) {
    var latkey = Math.floor(lat / dlat + 0.5) || 0, lngkey = Math.floor(lng / dlng + 0.5) || 0;
    return this.shapeType + '_' + latkey + '_' + lngkey + '_' + dlat + '_' + dlng;
  },

  toPtsRect: function (latMin, lngMin, latMax, lngMax) {
    return {
      pts: [[latMin, lngMin], [latMax, lngMin], [latMax, lngMax], [latMin, lngMax]],
      center: [(latMin + latMin) / 2, (lngMin + lngMax) / 2]
    };
  },

    // var latkey = Math.floor (lat / dlat + 0.5);
    // var isOdd = latkey % 2;
    // var lngkey = Math.floor(lng / dlng + 0.5 - isOdd * 0.5);
    // return this.shapeType + '_' + latkey + '_' + lngkey + '_' + dlat + '_' + dlng;

  /**
   * encodeHex 对六边形的情况进行编码
   * @param  {Number} lat  输入经度
   * @param  {Number} lng  输入纬度
   * @param  {Number} dlat 格子的经度差
   * @param  {Number} dlng 格子的纬度差
   * @return {String}      格子的哈希
   */
  encodeHex: function (lat, lng, dlat, dlng) {
    // var latkey = Math.floor (lat / dlat + 0.5);
    // var isOdd = latkey % 2;
    // var lngkey = Math.floor(lng / dlng + 0.5 - isOdd * 0.5);
    // return this.shapeType + '_' + latkey + '_' + lngkey + '_' + dlat + '_' + dlng;
    //
    var latkey = lat / dlat + 0.5;
    var latkeyFloor = Math.floor(latkey);
    var isOdd = latkeyFloor % 2;
    var lngkey = lng / dlng + 0.5 - isOdd * 0.5;
    var lngkeyFloor = Math.floor(lngkey);
    //
    var latkeyMore = latkey % 1;
    var lngkeyMore = lngkey % 1;
    if(latkeyMore > 2 / 3){
      var dx = lngkeyMore - 0.5;
      var dy = latkeyMore - 2 / 3;
      var add = 0;
      if(dx > 0 && 3 * dy + dx > 0){
        lngkey = lngkeyFloor;
        latkey = latkeyFloor + 1;
      } else {
       latkey = latkeyFloor;
       lngkey = lngkeyFloor;       
      }
    } else {
      latkey = latkeyFloor;
      lngkey = lngkeyFloor;
    }
    return this.shapeType + '_' + latkey + '_' + lngkey + '_' + dlat + '_' + dlng;
  },

  toPtsHex: function (latMin, lngMin, latMax, lngMax, isOdd) {
    var cx = (lngMin + lngMax) / 2, cy = (latMax + latMin) / 2;
    var rx = (lngMax - lngMin) / 2, ry = (latMax - latMin) / 2;
    cx += rx * isOdd;
    var p1x = cx, p1y = cy + ry;
    var p2x = cx + rx, p2y = cy + ry * 2 / 3;
    var p3x = p2x, p3y = cy - ry;
    var p4x = cx, p4y = cy - ry * 4 / 3;
    var p5x = cx - rx, p5y = p3y;
    var p6x = p5x, p6y = p2y;
    return {
      center: [cy, cx],
      pts: [[p1y, p1x], [p2y, p2x], [p3y, p3x], [p4y, p4x], [p5y, p5x], [p6y, p6x]]
    };
  }
};

var index$10 = Grid$2;

/**
 * requestAnimationFrame 对动画的兼容
 */
var requestAnimationFrame =
  window.requestAnimationFrame ||
  window.mozRequestAnimationFrame ||
  function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };
/**
 * cancelAnimationFrame 对动画的兼容
 */
var cancelAnimationFrame =
  window.cancelAnimationFrame ||
  window.cancelRequestAnimationFrame ||
  window.mozCancelAnimationFrame ||
  function(id) {
    window.clearTimeout(id);
  };

var animation$2 = {
  'requestAnimationFrame': requestAnimationFrame,
  'cancelAnimationFrame': cancelAnimationFrame,
};

/**
 * normalizeData 将函数可视化的维度，映射到0-1
 * @param {Array} ds   传入的数据
 * @param {String} vKey 用来可视化的维度
 * @return {[type]}  处理过的数据
 */
function normalizeData(ds, vKey) {
  var vMax, d, v;
  for (var k in ds) {
    d = ds[k];
    v = parseFloat(d[vKey]);
    vMax = (!vMax) ? v : Math.max(v, vMax);
  }

  vMax = vMax || 0.0000001;
  for (var i in ds) {
    d = ds[i];
    d.vFormat = d[vKey] / vMax;
  }
  return ds;
}

//标准化
function getLat(d){
  var pos = d.pos || d.center || d.position;
  if(pos) d = pos;
  return d[0] || d.lat;
}

function getLng(d){
  var pos = d.pos || d.center || d.position;
  if(pos) d = pos;
  return d[1] || d.lng;
}

function getTime(d, index) {
  var t = d.time || d.t;
  if(t) return new Date(t).getTime();
  return  index || 0;
}

/**
 * mapReduce mapReduce过程
 * @param  {Object/Array} ds      [description]
 * @param  {[type]} options [description]
 * @return {[type]}         [description]
 */
function mapReduce(ds, options){
  var map = options.map, reduce = options.reduce;
  var middle = {};
  var out = {};
  var k, v, key, value, pair;
  for (var k in ds) {
    if (ds.hasOwnProperty(k)) {
      v = ds[k]; 
      pair = map(k, v);
      key = pair.key, value = pair.value;
      if(!out[key]){
        out[key] = [value];
      } else {
        out[key].push(value);
      }
    }
  }
  if (!reduce) return out;
  for (var k in out) {
    out[k] = reduce(k, out[k]);
  }
  return out;
}


var schemas = {
  lat: {
    desc: '经度',
    type: 'number',
    range: [-180, 180]
  },
  lng: {
    desc: '纬度',
    type: 'number',
    range: [-90, 90]
  }
};

/**
 * getSchema 根据不同的输入 生成schema
 * @param  {Object/String} a 关键字或对象
 * @return {Object}   schema 对象
 */
function getSchema(a) {
  if(typeof(a) === 'string'){
    var schema = schemas[a];
    if(!schema) return;
    schema.key = a;
  }
}

// var array = [[120,100], [22,33], [22,333]];
// var out = mapReduce(array, {
//   map: function (k, arr){
//     return {
//       key: arr[0],
//       value: arr
//     }
//   },
//   reduce: function(k, values){
//     return values.length;
//   }
// });
// // out : {22: 2, 120: 1}


// filter
var data = {
  'normalizeData': normalizeData,
  'getSchema': getSchema,
  'getLat': getLat,
  'getLng': getLng,
  'mapReduce': mapReduce,
  'getTime': getTime
};

/**
 * 最通用的utils方法
 */
var Color = index$4;
var Sprite$1 = index$8;
var Grid$1 = index$10;
var Animation = animation$2;
var Data = data;
var utils = utils$1;
var Easings = easing;
delete Easings.__filename;


var index$2 = utils.merge(Color, Sprite$1, {Grid: Grid$1}, Animation, Data, utils, {Easings: Easings});


// var tiles = [
//   [//第一块瓦片
//     {id:1, geom:'xxx'},
//     {id:2, geom:'xxx'},
//     {id:3, geom:'xxx'}
//   ],
//   [
//     {id:2, geom:'xxx'},
//     {id:4, geom:'xxx'},
//     {id:1, geom:'xxx'}
//   ],
//   [
//     {id:5, geom:'xxx'},
//     {id:4, geom:'xxx'},
//     {id:2, geom:'xxx'}
//   ]
// ];

// var markObject = [];//索引所有id
// for(var i in tiles){
//   var tile = tiles[i];
//   for(var j = tile.length - 1; j >=0; j--){
//     var building = tile[j];
//     var id = building.id;
//     if(markObject[id]){//重复了就删除
//       tile.splice(i, 1);
//     } else {
//       markObject[id] = true;
//     }
//   }
// }

function getFeatureBBox(n){var r,e,o,t,i,a,l,f,u,g=n.geometry,s=g.type;if("Polygon"===s){i=g.coordinates,r=e=i[0][0][0],o=t=i[0][0][1];for(var v in i){a=i[v];for(var y in a)l=a[y],f=l[0],u=l[1],r=r>f?f:r,o=o>u?u:o,e=f>e?f:e,t=u>t?u:t;}return[[o,r],[t,e]]}if("MultiPolygon"===s){var d=g.coordinates;r=e=d[0][0][0][0],o=t=d[0][0][0][1];for(var c in d){i=d[c];for(var P in i){a=i[P];for(var I in a)l=a[I],f=l[0],u=l[1],r=r>f?f:r,o=o>u?u:o,e=f>e?f:e,t=u>t?u:t;}}return[[o,r],[t,e]]}}function getIndex(n,r){return r>0?n>0?1:2:0>n?3:4}function isPtInPolygon(n,r){for(var e=0,o=r.length,t=0;o>t;t++){var i=r[t],a=r[(t+1)%o],l=i[0]-n.lng,f=i[1]-n.lat,u=a[0]-n.lng,g=a[1]-n.lat,s=getIndex(u,g)-getIndex(l,f);if((1===s||-3===s)&&(e+=1),(-1===s||3===s)&&(e-=1),2===s||-2===s){var v=g*l-u*f;v>0?e+=2:e-=2;}}return 4===Math.abs(e)?!0:!1}function isPtInPolygons(n,r){for(var e=0;e<r.length;e++)if(r[e]&&r[e][0]&&r[e][0][0]&&r[e][0][0][0]){if(isPtInPolygon(n,r[e][0]))return!0}else if(isPtInPolygon(n,r[e]))return!0;return!1}function simplyfys(n,r){for(var e=[],o=0;o<n.length;o++){var t=n[o],i=t.length,a=[],l=parseInt(Math.round(i/r),10);0===l&&(l=1);for(var f=0;i>f;f+=l)a.push(t[f]);e.push(a);}return e}function isPtInBound(n,r){var e=r[0],o=r[1];return n[0]<e[1]?!1:n[0]>o[1]?!1:n[1]<e[0]?!1:n[1]>o[0]?!1:!0}function divideby(n,r){return Math.round(n/r)*r}function gridfy(n,r,e){return r?(e=e||r,n.lat=divideby(n.lat,r),n.lng=divideby(n.lng,e),n):n}function traver$1(n,r){var e;for(var o in n)e=n[o],e&&"object"==typeof e&&r(o,e,n)&&traver$1(e,r);}function isNone$1(n){return null===n||void 0===n||isNaN(n)}function genIsPolygonInFeature(n,r){r=r||{};var e=r.bbox||getFeatureBBox(n),o=e[0][0],t=e[0][1],i=e[1][0],a=e[1][1],l=i-o,f=a-t,u=n.geometry,g=u.coordinates,s=u.type,v=r.scale||500,y=function(n,r){return{x:Math.floor((i-n)/l*v),y:Math.floor((a-r)/f*v)}},d=document.createElement("canvas");d.width=d.height=v;var c=d.getContext("2d");if(c.fillStyle="#000","polygon"===s.toLowerCase())for(var P in g){var I=g[P];for(var h in I){h=parseInt(h);var x=I[h],p=y(x[1],x[0]);0===h?(c.beginPath(),c.moveTo(p.x,p.y)):c.lineTo(p.x,p.y),h===I.length-1&&(c.fill(),console.log("done"),c.closePath());}}if("multipolygon"===s.toLowerCase())for(var P in g){var m=g[P];for(var b in m){var I=m[b];for(var h in I){h=parseInt(h);var x=I[h],p=y(x[1],x[0]);0===h?(c.beginPath(),c.moveTo(p.x,p.y)):c.lineTo(p.x,p.y),h===I.length-1&&(c.fill(),console.log("done"),c.closePath());}}}var B=c.getImageData(0,0,v,v).data;return function(n){var r=y(n.lat,n.lng),e=r.x+v*r.y;return B[4*e-1]>0}}var geom={genIsPolygonInFeature:genIsPolygonInFeature,getFeatureBBox:getFeatureBBox,isPtInPolygons:isPtInPolygons,isPtInBound:isPtInBound,simplyfys:simplyfys,divideby:divideby,gridfy:gridfy,traver:traver$1,isNone:isNone$1};

function rectGrid(r,t,e,n,u,c,o){o=o||{};var i=[];r=r||.001,e=e||.001,t=t||1,n=n||1;var s=t-r,f=n-e;u=u||2,c=c||2;for(var a=s/u,d=f/c,v=o.cross||1,G=0,p=v?function(r,t,e){return r+.5*e*t%2}:function(r){return r},x=r;t>x;x+=a){G++;for(var h=e;n>h;h+=d)i.push({x:x,y:p(h,G,d)});}return i}var grid={rectGrid:rectGrid};

function generateSprite(e,t,a){e=e||"rgba(0,55,55,0)",t=t||"rgba(255,255,255,0.5)",a=a||25;var r,n=document.createElement("canvas"),i=n.getContext("2d");return n.width=a,n.height=a,r=i.createRadialGradient(n.width/2,n.height/2,0,n.width/2,n.height/2,n.width/2),r.addColorStop(1,e),r.addColorStop(.2,t),r.addColorStop(0,t),i.fillStyle=r,i.fillRect(0,0,n.width,n.height),n}function generateCircle(e,t){t=t||25;var a=document.createElement("canvas");a.width=t,a.height=t;var r=a.getContext("2d");return r.fillStyle=e||"rgba(200,0,0,0.4)",r.arc(t/2,t/2,t/2-1,0,2*Math.PI),r.fill(),a}function generateIcon(e){e=e||{};var t=document.createElement("canvas"),a=t.width=e.width||40,r=t.height=e.height||40,n=t.getContext("2d");return n.fillStyle="rgba(250,230,50,.7)",n.translate(a/2,r/2),n.rotate(Math.PI/4),n.arc(0,0,a/6*.5,0,2*Math.PI),n.fill(),n.fillStyle="rgba(250,250,50,.2)",n.arc(0,0,a/3*.9,0,2*Math.PI),n.fill(),t.toDataURL()}function createIconCss(e){if(e&&e.className){var t=e.className;sheets.addRule("."+t,"background-image:url("+generateIcon(e)+");width:40px;height:40px;background-size:100% 100%;border-radius:20px;border:1px solid rgba(45,45,45,1);");}}var sheets=document.styleSheets[0];var sprite$1={createIconCss:createIconCss,generateIcon:generateIcon,generateCircle:generateCircle,generateSprite:generateSprite};

function getFeatureBBox$1(n){var r,t,o,e,a,i,l,f,g,u=n.geometry,s=u.type;if("Polygon"===s){a=u.coordinates,r=t=a[0][0][0],o=e=a[0][0][1];for(var y in a){i=a[y];for(var v in i)l=i[v],f=l[0],g=l[1],r=r>f?f:r,o=o>g?g:o,t=f>t?f:t,e=g>e?g:e;}return[[o,r],[e,t]]}if("MultiPolygon"===s){var d=u.coordinates;r=t=d[0][0][0][0],o=e=d[0][0][0][1];for(var P in d){a=d[P];for(var c in a){i=a[c];for(var h in i)l=i[h],f=l[0],g=l[1],r=r>f?f:r,o=o>g?g:o,t=f>t?f:t,e=g>e?g:e;}}return[[o,r],[e,t]]}}function getIndex$1(n,r){return r>0?n>0?1:2:0>n?3:4}function isPtInPolygon$1(n,r){for(var t=0,o=r.length,e=0;o>e;e++){var a=r[e],i=r[(e+1)%o],l=a[0]-n.lng,f=a[1]-n.lat,g=i[0]-n.lng,u=i[1]-n.lat,s=getIndex$1(g,u)-getIndex$1(l,f);if((1===s||-3===s)&&(t+=1),(-1===s||3===s)&&(t-=1),2===s||-2===s){var y=u*l-g*f;y>0?t+=2:t-=2;}}return 4===Math.abs(t)?!0:!1}function isPtInPolygons$1(n,r){for(var t=0;t<r.length;t++)if(r[t]&&r[t][0]&&r[t][0][0]&&r[t][0][0][0]){if(isPtInPolygon$1(n,r[t][0]))return!0}else if(isPtInPolygon$1(n,r[t]))return!0;return!1}function simplyfys$1(n,r){for(var t=[],o=0;o<n.length;o++){var e=n[o],a=e.length,i=[],l=parseInt(Math.round(a/r),10);0===l&&(l=1);for(var f=0;a>f;f+=l)i.push(e[f]);t.push(i);}return t}function isPtInBound$1(n,r){var t=r[0],o=r[1];return n[0]<t[1]?!1:n[0]>o[1]?!1:n[1]<t[0]?!1:n[1]>o[0]?!1:!0}function divideby$1(n,r){return Math.round(n/r)*r}function gridfy$1(n,r,t){return r?(t=t||r,n.lat=divideby$1(n.lat,r),n.lng=divideby$1(n.lng,t),n):n}function genIsPolygonInFeature$1(n,r){r=r||{};var t=r.bbox||getFeatureBBox$1(n),o=t[0][0],e=t[0][1],a=t[1][0],i=t[1][1],l=a-o,f=i-e,g=n.geometry,u=g.coordinates,s=g.type,y=r.scale||500,v=function(n,r){return{x:Math.floor((a-n)/l*y),y:Math.floor((i-r)/f*y)}},d=document.createElement("canvas");d.width=d.height=y;var P=d.getContext("2d");if(P.fillStyle="#000","polygon"===s.toLowerCase())for(var c in u){var h=u[c];for(var I in h){I=parseInt(I);var m=h[I],x=v(m[1],m[0]);0===I?(P.beginPath(),P.moveTo(x.x,x.y)):P.lineTo(x.x,x.y),I===h.length-1&&(P.fill(),P.closePath());}}if("multipolygon"===s.toLowerCase())for(var c in u){var p=u[c];for(var B in p){var h=p[B];for(var I in h){I=parseInt(I);var m=h[I],x=v(m[1],m[0]);0===I?(P.beginPath(),P.moveTo(x.x,x.y)):P.lineTo(x.x,x.y),I===h.length-1&&(P.fill(),P.closePath());}}}var b=P.getImageData(0,0,y,y).data;return function(n){var r=v(n.lat,n.lng),t=r.x+y*r.y;return b[4*t-1]>0}}function randomPick(n){return n[Math.floor(Math.random()*n.length)]}var math={genIsPolygonInFeature:genIsPolygonInFeature$1,getFeatureBBox:getFeatureBBox$1,isPtInPolygons:isPtInPolygons$1,isPtInBound:isPtInBound$1,randomPick:randomPick,simplyfys:simplyfys$1,divideby:divideby$1,gridfy:gridfy$1};

var CommonUtils = index$2;
var Geom = geom;
var Grid = grid;
var Sprite = sprite$1;
var Mathes = math;
var index$1 = CommonUtils.merge(Grid, Sprite, Geom, Mathes, CommonUtils);

/*
 * flow.js
 * Copyright (C) 2016 disoul <disoul@DiSouldeMacBook-Pro.local>
 *
 * Distributed under terms of the MIT license.
 */

var Particle = function () {
  function Particle(w, h, life) {
    _classCallCheck(this, Particle);

    this.w = w;
    this.h = h;
    this.baseLife = life;
    this.init();
  }

  _createClass(Particle, [{
    key: 'init',
    value: function init() {
      this.x = Math.random() * this.w;
      this.y = Math.random() * this.h;
      this.life = this.baseLife * Math.random() / 2 + 0.5;
    }
  }, {
    key: 'updateLife',
    value: function updateLife(vec) {
      //if (!vec[0] && !vec[1]) return;
      this.life--;
      this.x = this.x + vec[0] / 100;
      this.y = this.y + vec[1] / 100;
      if (this.life < 0) {
        this.init();
      }
    }
  }]);

  return Particle;
}();

var Flow = function () {
  function Flow(container, count) {
    _classCallCheck(this, Flow);

    this.container = container;
    this.init();
    this.sprite = index$1.getSprite({
      'width': 10,
      'height': 10,
      'isContinue': false,
      'drawN': 7.4,
      'type': 'radian',
      'color': {
        'from': 'rgba(0,255,161,0.99)',
        'to': 'rgba(0,150,255,0)',
        'easing': 'Linear.None.1.7',
        'space': 'rgb'
      }
    });

    this.getParticles(count);
  }

  _createClass(Flow, [{
    key: 'init',
    value: function init() {
      this.canvas = document.createElement('canvas');
      this.canvas.width = this.container.clientWidth;
      this.canvas.height = this.container.clientHeight;
      this.canvas.id = "flow";
      this.container.appendChild(this.canvas);
      this.context = this.canvas.getContext('2d');
      this.tmpCanvas = document.createElement('canvas');
      this.tmpCanvas.width = this.container.clientWidth;
      this.tmpCanvas.height = this.container.clientHeight;
      this.tmpContext = this.tmpCanvas.getContext('2d');
    }
  }, {
    key: 'render',
    value: function render(d) {
      this.data = d;
      animation.append({
        draw: this.draw,
        context: this
      }, 'flow');
    }
  }, {
    key: 'getParticles',
    value: function getParticles(count) {
      this.particles = [];
      for (var i = 0; i < count; i++) {
        this.particles.push(new Particle(this.canvas.width, this.canvas.height, 100));
      }
    }
  }, {
    key: 'getVec',
    value: function getVec(x, y) {
      x = Math.round(x);
      y = Math.round(y);
      return [this.data[(x + y * this.canvas.width) * 3], this.data[(x + y * this.canvas.width) * 3 + 1]];
    }
  }, {
    key: 'updateTempCanvas',
    value: function updateTempCanvas() {
      var ctx = this.tmpCanvas.getContext('2d');
      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      ctx.drawImage(this.canvas, 0, 0);
      ctx.globalAlpha = 0.9;
    }
  }, {
    key: 'draw',
    value: function draw() {
      var _this = this;

      this.updateTempCanvas();
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.context.drawImage(this.tmpCanvas, 0, 0);
      this.context.fillStyle = '#fff';
      this.particles.forEach(function (p) {
        _this.context.drawImage(_this.sprite, p.x, p.y);
        //this.context.fillRect(p.x, p.y, 2, 2);
        p.updateLife(_this.getVec(p.x, p.y));
      });
    }
  }]);

  return Flow;
}();

/*
 * app.js
 * Copyright (C) 2016 disoul <disoul@DiSouldeMacBook-Pro.local>
 *
 * Distributed under terms of the MIT license.
 */
console.log(vecData);
document.write('<script src="http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1"></script>');

var flow = new Flow(document.getElementById('container'), 2000);

document.getElementById('enter').addEventListener('click', function (e) {
  flow.render(vecData);
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
